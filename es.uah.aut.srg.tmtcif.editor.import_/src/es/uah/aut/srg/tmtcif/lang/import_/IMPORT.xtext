grammar es.uah.aut.srg.tmtcif.lang.import_.IMPORT with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/tmtcif/import" 
import "http://srg.aut.uah.es/tmtcif/common" as common 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://srg.aut.uah.es/tmtcif/format" as format

TMTCIFModelFile returns common::TMTCIFModelFile:
	(imports+=TMTCIFModelFileImport)*
	element=TMTCIFImportImport
;

TMTCIFModelFileImport returns common::TMTCIFModelFileImport: 
	'import' ':=' importURI=STRING ';'
;

TMTCIFImportImport returns TMTCIFImportImport:
	'TMTCIFImportImport'
	name = ID
	'{'
		(('uri' ':=' uri=QualifiedName ';')
		& ('version' ':=' version=Version ';'))
		'from' ':=' from=[format::TMTCIFFormatFormat|VersionedQualifiedName] ';'
		'to' ':=' ('NULL' | to=[format::TMTCIFFormatFormat|VersionedQualifiedName]) ';'
		(dataSource+=TMTCIFImportDataSource)+ 
		(virtualSize=TMTCIFImportVirtualSize)?
	'}' ';'
;

TMTCIFImportDataSource returns TMTCIFImportDataSource:
	'TMTCIFImportDataSource' '{'
		'FieldRef' ':=' FieldRef=[format::TMTCIFFormatField|VersionedQualifiedReferenceName] ';'
		'leftTrim' ':=' leftTrim=INTEGER ';'
		'rightTrim' ':=' rightTrim=INTEGER ';'
	'}' ';'
;

TMTCIFImportVirtualSize returns TMTCIFImportVirtualSize:
	'TMTCIFImportVirtualSize' '{'
		'FieldRef' ':=' FieldRef=[format::TMTCIFFormatField|VersionedQualifiedReferenceName] ';'
		'to' ':=' to=[format::TMTCIFFormatField|VersionedQualifiedReferenceName] ';'
		('addSize' ':=' addSize=INTEGER ';')?
		('unit' ':=' unit=TMTCIFImportUnit ';')?
	'}' ';'
;

enum TMTCIFImportUnit returns TMTCIFImportUnit:
	bits = 'bits' | bytes = 'bytes'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);